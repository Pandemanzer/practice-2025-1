import os
os.environ["VOSK_LOG_LEVEL"] = "-1"  # üîá –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ Vosk C++
import time
import json
import re
import asyncio
import pyautogui
from utils import speak, listen
from googletrans import Translator
from datetime import datetime, timedelta


translator = Translator()

ALIASES_FILE = "aliases.json"
CACHE_FILE = "program_cache.json"

# === –Ø—Ä–ª—ã–∫–∏ ===
def load_aliases():
    try:
        with open(ALIASES_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

def save_aliases(aliases):
    with open(ALIASES_FILE, "w", encoding="utf-8") as f:
        json.dump(aliases, f, indent=4, ensure_ascii=False)

ALIASES = load_aliases()

# === –ü–µ—Ä–µ–≤–æ–¥ —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
def translate_if_needed(query):
    try:
        if re.search(r'[–∞-—è–ê-–Ø]', query):
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            translated = loop.run_until_complete(translator.translate(query, src='ru', dest='en'))
            return translated.text.lower()
        else:
            return query.lower()
    except:
        return query.lower()

# === –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å–Ω–∞—á–∞–ª–∞ –∞–Ω–≥–ª., –ø–æ—Ç–æ–º —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ
def get_search_terms(query):
    translated = translate_if_needed(query)
    if translated != query:
        return [translated, query]
    return [query]

# === –ü–æ–∏—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º –Ω–∞ –¥–∏—Å–∫–µ
def search_application_on_disk(search_dirs):
    matches = {}
    for root_dir in search_dirs:
        for root, dirs, files in os.walk(root_dir):
            for file in files:
                if file.lower().endswith((".exe", ".lnk")):
                    name = os.path.splitext(file)[0].lower()
                    if name not in matches:
                        matches[name] = os.path.join(root, file)
    return matches

# === –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º
def get_program_cache(search_dirs, max_age_days=3):
    if os.path.exists(CACHE_FILE):
        modified_time = datetime.fromtimestamp(os.path.getmtime(CACHE_FILE))
        if datetime.now() - modified_time < timedelta(days=max_age_days):
            with open(CACHE_FILE, "r", encoding="utf-8") as f:
                return json.load(f)

    # –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –æ–±–Ω–æ–≤–∏–º
    speak("–û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    cache = search_application_on_disk(search_dirs)
    with open(CACHE_FILE, "w", encoding="utf-8") as f:
        json.dump(cache, f, indent=4, ensure_ascii=False)
    speak("–°–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º –æ–±–Ω–æ–≤–ª—ë–Ω.")
    return cache


# === –ú–µ–Ω—é –ü—É—Å–∫
def open_with_start_menu(app_name):
    pyautogui.press("win")
    time.sleep(1)
    pyautogui.write(app_name, interval=0.1)
    time.sleep(1)
    pyautogui.press("enter")

# === –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
def confirm(prompt_text):
    speak(prompt_text)
    response = listen().strip().lower()

    yes_words = ["–¥–∞", "–∞–≥–∞", "–≤–µ—Ä–Ω–æ", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", "–¥–∞–≤–∞–π", "–æ–∫", "—É–≥—É", "—Ç–æ—á–Ω–æ"]
    no_words = ["–Ω–µ—Ç", "–Ω–µ", "–æ—Ç–º–µ–Ω–∞", "–Ω–µ –Ω–∞–¥–æ", "–Ω–µ —Ö–æ—á—É", "–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", "–æ—Ç–∫–∞–∑"]

    if response in yes_words:
        return True
    elif response in no_words:
        return False
    else:
        return confirm("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ ‚Äî –¥–∞ –∏–ª–∏ –Ω–µ—Ç?")

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —è—Ä–ª—ã–∫–∞
def add_to_aliases(path):
    while True:
        speak("–ö–∞–∫ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –Ω–∞–∑–≤–∞—Ç—å —ç—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—É?")
        custom_name = listen().strip()
        if not custom_name:
            continue
        speak(f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {custom_name}. –í–µ—Ä–Ω–æ?")
        if confirm("–≠—Ç–æ –≤–µ—Ä–Ω–æ?"):
            ALIASES[custom_name] = path
            save_aliases(ALIASES)
            speak(f"–°–æ—Ö—Ä–∞–Ω–∏–ª–∞ –∫–∞–∫ {custom_name}.")
            break
        else:
            speak("–•–æ—Ä–æ—à–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")

# === –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞
def open_application(app_name):
    username = os.getlogin()

    if app_name in ALIASES:
        path = ALIASES[app_name]
        if path.startswith("[START_MENU_SEARCH:"):
            name = path.replace("[START_MENU_SEARCH:", "").replace("]", "")
            open_with_start_menu(name)
            speak(f"–û—Ç–∫—Ä—ã–≤–∞—é {name} —á–µ—Ä–µ–∑ –º–µ–Ω—é –ü—É—Å–∫.")
            return
        elif os.path.exists(path):
            os.startfile(path)
            speak(f"–û—Ç–∫—Ä—ã–≤–∞—é {app_name} –∏–∑ —è—Ä–ª—ã–∫–∞.")
            return

    # === –ü–∞–ø–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
    search_dirs = [
        "C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs",
        f"C:\\Users\\{username}\\Desktop",
        "C:\\Program Files",
        "C:\\Program Files (x86)",
        f"C:\\Users\\{username}\\AppData\\Local\\Programs",
        f"C:\\Users\\{username}\\AppData\\Local",
        f"C:\\Users\\{username}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs"
    ]

    # === –ö—ç—à –ø—Ä–æ–≥—Ä–∞–º–º
    program_cache = get_program_cache(search_dirs)

    # === –¢–µ—Ä–º–∏–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
    search_terms = get_search_terms(app_name)

    # === –°–æ–≤–ø–∞–¥–µ–Ω–∏—è
    found = []
    for term in search_terms:
        for key, path in program_cache.items():
            if term.lower() in key:
                found.append((key, path))

    # === –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–µ–π
    seen = set()
    matches = []
    for name, path in found:
        if path not in seen:
            seen.add(path)
            matches.append((name, path))

    # === –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    if not matches:
        speak(f"–Ø –Ω–µ –Ω–∞—à–ª–∞ {app_name}. –ò—Å–∫–∞—Ç—å —á–µ—Ä–µ–∑ –º–µ–Ω—é –ü—É—Å–∫?")
        if confirm("–ü–æ–∏—Å–∫–∞—Ç—å —á–µ—Ä–µ–∑ –º–µ–Ω—é –ü—É—Å–∫?"):
            open_with_start_menu(app_name)
            speak(f"–ü—Ä–æ–±—É—é –æ—Ç–∫—Ä—ã—Ç—å {app_name}.")
            if confirm("–Ø –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫—Ä—ã–ª–∞?"):
                add_to_aliases(f"[START_MENU_SEARCH:{app_name}]")
        else:
            speak("–•–æ—Ä–æ—à–æ, –Ω–µ –∏—â—É.")
        return

    # === –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ ‚Äî –æ—Ç–∫—Ä—ã—Ç—å —Å—Ä–∞–∑—É
    for name, path in matches:
        if name == app_name.lower():
            os.startfile(path)
            speak(f"–û—Ç–∫—Ä—ã–≤–∞—é {name}.")
            return

    # === –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
    if len(matches) > 1:
        speak(f"–ù–∞–π–¥–µ–Ω–æ {len(matches)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
        print("\n--- –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---")
        for i, (name, path) in enumerate(matches, 1):
            print(f"{i}. {name}")
            speak(f"{i}: {name}")
        speak("–°–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–≥–æ –∏–ª–∏ '–≤—ã—Ö–æ–¥'.")

        response = listen().lower()
        if "–≤—ã—Ö–æ–¥" in response or "–æ—Ç–º–µ–Ω–∞" in response:
            speak("–í—ã–±–æ—Ä –æ—Ç–º–µ–Ω—ë–Ω.")
            return

        digit_map = {
            "–æ–¥–∏–Ω": 1, "–ø–µ—Ä–≤–æ–µ": 1, "1": 1,
            "–¥–≤–∞": 2, "–≤—Ç–æ—Ä–æ–µ": 2, "2": 2,
            "—Ç—Ä–∏": 3, "—Ç—Ä–µ—Ç—å–µ": 3, "3": 3,
            "—á–µ—Ç—ã—Ä–µ": 4, "—á–µ—Ç–≤–µ—Ä—Ç–æ–µ": 4, "4": 4,
            "–ø—è—Ç—å": 5, "–ø—è—Ç–æ–µ": 5, "5": 5
        }

        for key, val in digit_map.items():
            if key in response and val <= len(matches):
                os.startfile(matches[val - 1][1])
                speak(f"–û—Ç–∫—Ä—ã–≤–∞—é {matches[val - 1][0]}.")
                return

        speak("–ù–µ –ø–æ–Ω—è–ª–∞ –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # === –û–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã—Ç—å
    os.startfile(matches[0][1])
    speak(f"–û—Ç–∫—Ä—ã–≤–∞—é {matches[0][0]}.")

def handle(query):
    query = query.strip().lower()

    if "–∑–∞–±—É–¥—å —è—Ä–ª—ã–∫" in query or "—É–¥–∞–ª–∏ —è—Ä–ª—ã–∫" in query:
        name = query.replace("–∑–∞–±—É–¥—å —è—Ä–ª—ã–∫", "").replace("—É–¥–∞–ª–∏ —è—Ä–ª—ã–∫", "").strip()
        if name in ALIASES:
            speak(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—ã—Ç—å —è—Ä–ª—ã–∫ {name}?")
            if confirm("–£–¥–∞–ª–∏—Ç—å —è—Ä–ª—ã–∫?"):
                del ALIASES[name]
                save_aliases(ALIASES)
                speak(f"–Ø—Ä–ª—ã–∫ {name} —É–¥–∞–ª—ë–Ω.")
            else:
                speak("–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è.")
        else:
            speak(f"–Ø—Ä–ª—ã–∫ {name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return True

    if "–æ—Ç–∫—Ä–æ–π" in query or "–∑–∞–ø—É—Å—Ç–∏" in query:
        app_name = query.replace("–æ—Ç–∫—Ä–æ–π", "").replace("–∑–∞–ø—É—Å—Ç–∏", "").strip()
        if app_name:
            open_application(app_name)
            return True

    return False

